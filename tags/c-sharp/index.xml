<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C# on Daniel Genezini</title><link>https://blog.genezini.com/tags/c-sharp/</link><description>Recent content in C# on Daniel Genezini</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2022 Daniel Genezini All rights reserved</copyright><lastBuildDate>Fri, 09 Dec 2022 14:40:00 -0300</lastBuildDate><atom:link href="https://blog.genezini.com/tags/c-sharp/index.xml" rel="self" type="application/rss+xml"/><item><title>Interesting Links - 02 (09-Dec-2022)</title><link>https://blog.genezini.com/p/interesting-links-02-09-dec-2022/</link><pubDate>Fri, 09 Dec 2022 14:40:00 -0300</pubDate><guid>https://blog.genezini.com/p/interesting-links-02-09-dec-2022/</guid><description>&lt;img src="https://blog.genezini.com/p/interesting-links-02-09-dec-2022/cover-links.jpg" alt="Featured image of post Interesting Links - 02 (09-Dec-2022)" />Architecture No architecture is better than bad architecture AWS Faster iteration experience for AWS SAM applications in the AWS Toolkits for JetBrains and VS Code New — Create Point-to-Point Integrations Between Event Producers and Consumers with Amazon EventBridge Pipes Blazor How to Build a Blog App Using Blazor WASM and Strapi C# / .NET TIL: Always check for missing configuration values inside constructors Validating .NET Configuration Removing out-of-support components from your Visual Studio installations A new wave of analyzers in .</description></item><item><title>Interesting Links - 01 (02-Dec-2022)</title><link>https://blog.genezini.com/p/interesting-links-01-02-dec-2022/</link><pubDate>Fri, 02 Dec 2022 05:30:00 -0300</pubDate><guid>https://blog.genezini.com/p/interesting-links-01-02-dec-2022/</guid><description>&lt;img src="https://blog.genezini.com/p/interesting-links-01-02-dec-2022/cover-links.jpg" alt="Featured image of post Interesting Links - 01 (02-Dec-2022)" />AWS AWS announces native AOT tooling support for .NET applications on AWS Lambda
Accelerate Your Lambda Functions with Lambda SnapStart
Announcing Amazon RDS Blue/Green Deployments for safer, simpler, and faster updates
AWS 3rd party monitoring tool may be costing you an arm and leg
Blazor C# / Blazor Wolfenstein - Part 1 - Blazor
I Built an Anime Themed Pomodoro App With WebAssembly Blazor
C# / .NET Web Scraping With C#</description></item><item><title>Analyzing and enforcing .NET code coverage with coverlet</title><link>https://blog.genezini.com/p/analyzing-and-enforcing-.net-code-coverage-with-coverlet/</link><pubDate>Thu, 03 Nov 2022 08:10:00 -0300</pubDate><guid>https://blog.genezini.com/p/analyzing-and-enforcing-.net-code-coverage-with-coverlet/</guid><description>&lt;img src="https://blog.genezini.com/p/analyzing-and-enforcing-.net-code-coverage-with-coverlet/cover.png" alt="Featured image of post Analyzing and enforcing .NET code coverage with coverlet" />Introduction Automated software tests are a requirement for ensuring we are delivering a product with quality to our users. It helps in finding bugs and requirements not fulfilled at development time, but also decreases the cost of maintenance by making the future changes to our code safer. Besides, the act of writing testable code alone increases the quality of the code we are writing because testable code has to be decoupled.</description></item><item><title>Enforcing .NET code style rules at compile time</title><link>https://blog.genezini.com/p/enforcing-.net-code-style-rules-at-compile-time/</link><pubDate>Tue, 25 Oct 2022 08:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/enforcing-.net-code-style-rules-at-compile-time/</guid><description>&lt;img src="https://blog.genezini.com/p/enforcing-.net-code-style-rules-at-compile-time/cover.png" alt="Featured image of post Enforcing .NET code style rules at compile time" />Introduction Static code analysis is a great tool for spotting some kinds of error in your code, for example, not disposing of objects that implement IDisposable. Also, it helps to enforce and validate if the code written is following a defined standard, for example, using PascalCase for class names and camelCase for parameter names.
In this post I&amp;rsquo;ll show how to use Roslyn Analyzers with C# to enforce some standards of code quality and code style on your code, throwing errors at compile time if any rules are not being respected and not allowing the code to be pushed to protected branches of the repository.</description></item><item><title>Defining formatting rules in .NET with EditorConfig</title><link>https://blog.genezini.com/p/defining-formatting-rules-in-.net-with-editorconfig/</link><pubDate>Tue, 18 Oct 2022 08:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/defining-formatting-rules-in-.net-with-editorconfig/</guid><description>&lt;img src="https://blog.genezini.com/p/defining-formatting-rules-in-.net-with-editorconfig/cover.png" alt="Featured image of post Defining formatting rules in .NET with EditorConfig" />Introduction When working with other people and multiple editors/IDEs, it is common to have different editor settings, losing consistency in formatting styles of the code. For example:
Using tabs/spaces and different sizes of indentation, making your code harder to read; Using different encoding between files, causing hard to find bugs at runtime (showing invalid characters) and breaking automated tests. In this post I&amp;rsquo;ll show how to maintain a standard for everyone who works in the code, no matter the editor used, and in a next post I&amp;rsquo;ll show how to enforce these (and other) rules on build and in the continuous integration pipeline.</description></item><item><title>Integration tests without API dependencies with ASP.NET Core and WireMock.Net</title><link>https://blog.genezini.com/p/integration-tests-without-api-dependencies-with-asp.net-core-and-wiremock.net/</link><pubDate>Sun, 25 Sep 2022 08:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/integration-tests-without-api-dependencies-with-asp.net-core-and-wiremock.net/</guid><description>&lt;img src="https://blog.genezini.com/p/integration-tests-without-api-dependencies-with-asp.net-core-and-wiremock.net/cover.jpg" alt="Featured image of post Integration tests without API dependencies with ASP.NET Core and WireMock.Net" />Introduction Although there are many definitions about the scope of an integration test, Martin Fowler defines Narrow integration tests, where the integration with other systems are tested using mocks, and Broad integration tests, where they communicate using real APIs.
In this post, I&amp;rsquo;ll explain how to create mocks for HTTP APIs in narrow integration tests using the WireMock.Net library.
What should we mock? Vladimir Khorikov has a concept of managed dependencies and unmanaged dependencies, which I consider complementary to Martin Fowler&amp;rsquo;s, to choose what should be to mocked.</description></item></channel></rss>