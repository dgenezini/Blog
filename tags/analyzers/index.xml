<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Analyzers on Daniel Genezini</title><link>https://blog.genezini.com/tags/analyzers/</link><description>Recent content in Analyzers on Daniel Genezini</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2022 Daniel Genezini All rights reserved</copyright><lastBuildDate>Mon, 07 Nov 2022 07:30:00 -0300</lastBuildDate><atom:link href="https://blog.genezini.com/tags/analyzers/index.xml" rel="self" type="application/rss+xml"/><item><title>Git tips</title><link>https://blog.genezini.com/p/git-tips/</link><pubDate>Mon, 07 Nov 2022 07:30:00 -0300</pubDate><guid>https://blog.genezini.com/p/git-tips/</guid><description>&lt;img src="https://blog.genezini.com/cover.png" alt="Featured image of post Git tips" />Introduction https://www.atlassian.com/blog/git/advanced-git-aliases
[alias]
f = fetch --prune wp = worktree prune wa = &amp;quot;!f() { git worktree prune &amp;amp;&amp;amp; git worktree add $1 $2; }; f&amp;quot; rb = &amp;quot;!f() { git fetch --prune &amp;amp;&amp;amp; git rebase $1; }; f&amp;quot; mg = &amp;quot;!f() { git checkout --ignore-other-worktrees $1 &amp;amp;&amp;amp; git pull &amp;amp;&amp;amp; git checkout - &amp;amp;&amp;amp; git merge $1; }; f&amp;quot; Git checkout - Git commit -am (add and commit)
Git aliases .</description></item><item><title>Enforcing .NET code style rules at compile time</title><link>https://blog.genezini.com/p/enforcing-.net-code-style-rules-at-compile-time/</link><pubDate>Tue, 25 Oct 2022 08:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/enforcing-.net-code-style-rules-at-compile-time/</guid><description>&lt;img src="https://blog.genezini.com/p/enforcing-.net-code-style-rules-at-compile-time/cover.png" alt="Featured image of post Enforcing .NET code style rules at compile time" />Introduction Static code analysis is a great tool for spotting some kinds of error in your code, for example, not disposing of objects that implement IDisposable. Also, it helps to enforce and validate if the code written is following a defined standard, for example, using PascalCase for class names and camelCase for parameter names.
In this post I&amp;rsquo;ll show how to use Roslyn Analyzers with C# to enforce some standards of code quality and code style on your code, throwing errors at compile time if any rules are not being respected and not allowing the code to be pushed to protected branches of the repository.</description></item></channel></rss>