<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Logs on Daniel Genezini | It works on my machine</title><link>https://blog.genezini.com/tags/logs/</link><description>Recent content in Logs on Daniel Genezini | It works on my machine</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2022 Daniel Genezini All rights reserved</copyright><lastBuildDate>Mon, 02 Jan 2023 07:00:00 -0300</lastBuildDate><atom:link href="https://blog.genezini.com/tags/logs/index.xml" rel="self" type="application/rss+xml"/><item><title>Don't box your logs</title><link>https://blog.genezini.com/p/dont-box-your-logs/</link><pubDate>Mon, 02 Jan 2023 07:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/dont-box-your-logs/</guid><description>&lt;img src="https://blog.genezini.com/p/dont-box-your-logs/cover.jpg" alt="Featured image of post Don't box your logs" /> .NET&amp;rsquo;s default interface for logging (ILogger) can log any number and type of parameters in the log messages. Because of this, the parameters are passed as object to the log implementation, causing the boxing of value types.
In this post, I&amp;rsquo;ll show how .NET Core removed the need for boxing when logging, focusing on the .NET 6 source generators.</description><postDescription>
.NET&amp;rsquo;s default interface for logging (ILogger) can log any number and type of parameters in the log messages. Because of this, the parameters are passed as object to the log implementation, causing the boxing of value types.
In this post, I&amp;rsquo;ll show how .NET Core removed the need for boxing when logging, focusing on the .NET 6 source generators.</postDescription></item></channel></rss>