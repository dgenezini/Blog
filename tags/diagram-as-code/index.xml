<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Diagram as code on Daniel Genezini</title><link>https://blog.genezini.com/tags/diagram-as-code/</link><description>Recent content in Diagram as code on Daniel Genezini</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2022 Daniel Genezini All rights reserved</copyright><lastBuildDate>Tue, 22 Nov 2022 05:45:00 -0300</lastBuildDate><atom:link href="https://blog.genezini.com/tags/diagram-as-code/index.xml" rel="self" type="application/rss+xml"/><item><title>Cleaner representation of software architectures with the C4 Model</title><link>https://blog.genezini.com/p/cleaner-representation-of-software-architectures-with-the-c4-model/</link><pubDate>Tue, 22 Nov 2022 05:45:00 -0300</pubDate><guid>https://blog.genezini.com/p/cleaner-representation-of-software-architectures-with-the-c4-model/</guid><description>&lt;img src="https://blog.genezini.com/p/cleaner-representation-of-software-architectures-with-the-c4-model/cover.jpg" alt="Featured image of post Cleaner representation of software architectures with the C4 Model" />Introduction Diagrams are a great way to visually communicate something. However, the majority of software architecture diagrams don&amp;rsquo;t really express what they intend to, lacking description of its elements and with lots of implicit notations only understood by who drew the diagram. Also, they try to express more than one vision (high level, infrastructure, flow order, etc) in only one diagram, making it even harder for non technical people or people outside the project to understand.</description></item></channel></rss>