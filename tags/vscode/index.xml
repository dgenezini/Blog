<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VSCode on Daniel Genezini</title><link>https://blog.genezini.com/tags/vscode/</link><description>Recent content in VSCode on Daniel Genezini</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2022 Daniel Genezini All rights reserved</copyright><lastBuildDate>Tue, 29 Nov 2022 08:20:00 -0300</lastBuildDate><atom:link href="https://blog.genezini.com/tags/vscode/index.xml" rel="self" type="application/rss+xml"/><item><title>Keep your diagrams updated with continuous delivery</title><link>https://blog.genezini.com/p/keep-your-diagrams-updated-with-continuous-delivery/</link><pubDate>Tue, 29 Nov 2022 08:20:00 -0300</pubDate><guid>https://blog.genezini.com/p/keep-your-diagrams-updated-with-continuous-delivery/</guid><description>&lt;img src="https://blog.genezini.com/p/keep-your-diagrams-updated-with-continuous-delivery/cover.jpg" alt="Featured image of post Keep your diagrams updated with continuous delivery" />Introduction Changing software diagrams is hard. The simple act of adding a new box may require us to drag all the existing boxes and reorganize the diagram. This is, probably, the main reason why software diagrams are constantly left deprecated after the first stages of the development process.
In this post I&amp;rsquo;ll show how defining diagrams as code can help in designing and updating software diagrams, and how to automate the process of updating the documentation with those diagrams.</description></item></channel></rss>