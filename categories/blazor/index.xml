<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blazor on Daniel Genezini | It works on my machine</title><link>https://blog.genezini.com/categories/blazor/</link><description>Recent content in Blazor on Daniel Genezini | It works on my machine</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2022 Daniel Genezini All rights reserved</copyright><lastBuildDate>Tue, 02 May 2023 06:00:00 -0300</lastBuildDate><atom:link href="https://blog.genezini.com/categories/blazor/index.xml" rel="self" type="application/rss+xml"/><item><title>Real-time charts with Blazor, SignalR and ApexCharts</title><link>https://blog.genezini.com/p/real-time-charts-with-blazor-signalr-and-apexcharts/</link><pubDate>Tue, 02 May 2023 06:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/real-time-charts-with-blazor-signalr-and-apexcharts/</guid><description>&lt;img src="https://blog.genezini.com/p/real-time-charts-with-blazor-signalr-and-apexcharts/cover.jpg" alt="Featured image of post Real-time charts with Blazor, SignalR and ApexCharts" /> SignalR is a free open-source library for ASP.NET Core that allows the server to push real-time asynchronous messages to connected clients. It is an abstraction layer on top of WebSockets, making it easier to use and providing fallback to other forms of communication when necessary (server-sent events and long polling).
In this post, I&amp;rsquo;ll show how to build a Blazor WebAssembly app that displays real-time charts from a SignalR server.</description><postDescription>
SignalR is a free open-source library for ASP.NET Core that allows the server to push real-time asynchronous messages to connected clients. It is an abstraction layer on top of WebSockets, making it easier to use and providing fallback to other forms of communication when necessary (server-sent events and long polling).
In this post, I&amp;rsquo;ll show how to build a Blazor WebAssembly app that displays real-time charts from a SignalR server.</postDescription></item><item><title>Introducing module federation for Blazor components</title><link>https://blog.genezini.com/p/introducing-module-federation-for-blazor-components/</link><pubDate>Wed, 16 Nov 2022 15:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/introducing-module-federation-for-blazor-components/</guid><description>&lt;img src="https://blog.genezini.com/p/introducing-module-federation-for-blazor-components/cover.jpg" alt="Featured image of post Introducing module federation for Blazor components" /> With the release of .NET 7, Microsoft included a feature to render Blazor components in JavaScript applications (RegisterCustomElement&amp;lt;T&amp;gt;). This helps those who want to slowly migrate JavaScript applications to Blazor, but unfortunately, won&amp;rsquo;t work for exposing Blazor components as microfrontends, as it works only for JavaScript applications deployed together with the Blazor application.
In this post, I&amp;rsquo;ll present a nuget package that I&amp;rsquo;ve created as a prototype to try to solve this problem, exposing Blazor components with module federation for other applications to consume.</description><postDescription>
With the release of .NET 7, Microsoft included a feature to render Blazor components in JavaScript applications (RegisterCustomElement&amp;lt;T&amp;gt;). This helps those who want to slowly migrate JavaScript applications to Blazor, but unfortunately, won&amp;rsquo;t work for exposing Blazor components as microfrontends, as it works only for JavaScript applications deployed together with the Blazor application.
In this post, I&amp;rsquo;ll present a nuget package that I&amp;rsquo;ve created as a prototype to try to solve this problem, exposing Blazor components with module federation for other applications to consume.</postDescription></item></channel></rss>