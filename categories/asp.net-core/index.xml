<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ASP.NET Core on Daniel Genezini</title><link>https://blog.genezini.com/categories/asp.net-core/</link><description>Recent content in ASP.NET Core on Daniel Genezini</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2022 Daniel Genezini All rights reserved</copyright><lastBuildDate>Tue, 20 Dec 2022 06:45:00 -0300</lastBuildDate><atom:link href="https://blog.genezini.com/categories/asp.net-core/index.xml" rel="self" type="application/rss+xml"/><item><title>Time-out requests in ASP.NET Core with cancellation tokens</title><link>https://blog.genezini.com/p/time-out-requests-in-asp.net-core-with-cancellation-tokens/</link><pubDate>Tue, 20 Dec 2022 06:45:00 -0300</pubDate><guid>https://blog.genezini.com/p/time-out-requests-in-asp.net-core-with-cancellation-tokens/</guid><description>&lt;img src="https://blog.genezini.com/p/time-out-requests-in-asp.net-core-with-cancellation-tokens/cover.jpg" alt="Featured image of post Time-out requests in ASP.NET Core with cancellation tokens" /> When ASP.NET Core is running in an AWS Lambda and receiving requests through an AWS API Gateway, the application is not notified of an API Gateway time-out and keeps processing the request, completing it eventually. This will leave metrics and logs of a successful request when the client received a time-out error.
In this post, I&amp;rsquo;ll show how to solve this problem with cancellation tokens and time-outs.</description><postDescription>
When ASP.NET Core is running in an AWS Lambda and receiving requests through an AWS API Gateway, the application is not notified of an API Gateway time-out and keeps processing the request, completing it eventually. This will leave metrics and logs of a successful request when the client received a time-out error.
In this post, I&amp;rsquo;ll show how to solve this problem with cancellation tokens and time-outs.</postDescription></item><item><title>Canceling abandoned requests in ASP.NET Core</title><link>https://blog.genezini.com/p/canceling-abandoned-requests-in-asp.net-core/</link><pubDate>Mon, 12 Dec 2022 07:30:00 -0300</pubDate><guid>https://blog.genezini.com/p/canceling-abandoned-requests-in-asp.net-core/</guid><description>&lt;img src="https://blog.genezini.com/p/canceling-abandoned-requests-in-asp.net-core/cover.jpg" alt="Featured image of post Canceling abandoned requests in ASP.NET Core" /> When a client makes an HTTP request, the client can abort the request, leaving the server processing if it&amp;rsquo;s not prepared to handle this scenario; wasting its resources that could be used to process other jobs.
In this post, I&amp;rsquo;ll show how to use Cancellation Tokens to cancel running requests that were aborted by clients.</description><postDescription>
When a client makes an HTTP request, the client can abort the request, leaving the server processing if it&amp;rsquo;s not prepared to handle this scenario; wasting its resources that could be used to process other jobs.
In this post, I&amp;rsquo;ll show how to use Cancellation Tokens to cancel running requests that were aborted by clients.</postDescription></item><item><title>Integration tests without API dependencies with ASP.NET Core and WireMock.Net</title><link>https://blog.genezini.com/p/integration-tests-without-api-dependencies-with-asp.net-core-and-wiremock.net/</link><pubDate>Sun, 25 Sep 2022 08:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/integration-tests-without-api-dependencies-with-asp.net-core-and-wiremock.net/</guid><description>&lt;img src="https://blog.genezini.com/p/integration-tests-without-api-dependencies-with-asp.net-core-and-wiremock.net/cover.jpg" alt="Featured image of post Integration tests without API dependencies with ASP.NET Core and WireMock.Net" /> Although there are many definitions about the scope of an integration test, Martin Fowler defines Narrow integration tests, where the integration with other systems are tested using mocks, and Broad integration tests, where they communicate using real APIs.
In this post, I&amp;rsquo;ll explain how to create mocks for HTTP APIs in narrow integration tests using the WireMock.Net library.</description><postDescription>
Although there are many definitions about the scope of an integration test, Martin Fowler defines Narrow integration tests, where the integration with other systems are tested using mocks, and Broad integration tests, where they communicate using real APIs.
In this post, I&amp;rsquo;ll explain how to create mocks for HTTP APIs in narrow integration tests using the WireMock.Net library.</postDescription></item></channel></rss>