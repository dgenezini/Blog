<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Daniel Genezini</title><link>https://blog.genezini.com/</link><description>Recent content on Daniel Genezini</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2022 Daniel Genezini All rights reserved</copyright><lastBuildDate>Wed, 16 Nov 2022 15:00:00 -0300</lastBuildDate><atom:link href="https://blog.genezini.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Introducing module federation for Blazor components</title><link>https://blog.genezini.com/p/introducing-module-federation-for-blazor-components/</link><pubDate>Wed, 16 Nov 2022 15:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/introducing-module-federation-for-blazor-components/</guid><description>&lt;img src="https://blog.genezini.com/p/introducing-module-federation-for-blazor-components/cover.jpg" alt="Featured image of post Introducing module federation for Blazor components" />Introduction With the release of .NET 7, Microsoft included a feature to render Blazor components in JavaScript applications (RegisterCustomElement&amp;lt;T&amp;gt;). This helps those who want to slowly migrate JavaScript applications to Blazor, but unfortunately, won&amp;rsquo;t work for exposing Blazor components as microfrontends, as it works only for JavaScript applications deployed together with the Blazor application.
In this post, I&amp;rsquo;ll present a nuget package that I&amp;rsquo;ve created as a prototype to try to solve this problem, exposing Blazor components with module federation for other applications to consume.</description></item><item><title>Analyzing and enforcing .NET code coverage with coverlet</title><link>https://blog.genezini.com/p/analyzing-and-enforcing-.net-code-coverage-with-coverlet/</link><pubDate>Thu, 03 Nov 2022 08:10:00 -0300</pubDate><guid>https://blog.genezini.com/p/analyzing-and-enforcing-.net-code-coverage-with-coverlet/</guid><description>&lt;img src="https://blog.genezini.com/p/analyzing-and-enforcing-.net-code-coverage-with-coverlet/cover.png" alt="Featured image of post Analyzing and enforcing .NET code coverage with coverlet" />Introduction Automated software tests are a requirement for ensuring we are delivering a product with quality to our users. It helps in finding bugs and requirements not fulfilled at development time, but also decreases the cost of maintenance by making the future changes to our code safer. Besides, the act of writing testable code alone increases the quality of the code we are writing because testable code has to be decoupled.</description></item><item><title>Enforcing .NET code style rules at compile time</title><link>https://blog.genezini.com/p/enforcing-.net-code-style-rules-at-compile-time/</link><pubDate>Tue, 25 Oct 2022 08:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/enforcing-.net-code-style-rules-at-compile-time/</guid><description>&lt;img src="https://blog.genezini.com/p/enforcing-.net-code-style-rules-at-compile-time/cover.png" alt="Featured image of post Enforcing .NET code style rules at compile time" />Introduction Static code analysis is a great tool for spotting some kinds of error in your code, for example, not disposing of objects that implement IDisposable. Also, it helps to enforce and validate if the code written is following a defined standard, for example, using PascalCase for class names and camelCase for parameter names.
In this post I&amp;rsquo;ll show how to use Roslyn Analyzers with C# to enforce some standards of code quality and code style on your code, throwing errors at compile time if any rules are not being respected and not allowing the code to be pushed to protected branches of the repository.</description></item><item><title>Defining formatting rules in .NET with EditorConfig</title><link>https://blog.genezini.com/p/defining-formatting-rules-in-.net-with-editorconfig/</link><pubDate>Tue, 18 Oct 2022 08:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/defining-formatting-rules-in-.net-with-editorconfig/</guid><description>&lt;img src="https://blog.genezini.com/p/defining-formatting-rules-in-.net-with-editorconfig/cover.png" alt="Featured image of post Defining formatting rules in .NET with EditorConfig" />Introduction When working with other people and multiple editors/IDEs, it is common to have different editor settings, losing consistency in formatting styles of the code. For example:
Using tabs/spaces and different sizes of indentation, making your code harder to read; Using different encoding between files, causing hard to find bugs at runtime (showing invalid characters) and breaking automated tests. In this post I&amp;rsquo;ll show how to maintain a standard for everyone who works in the code, no matter the editor used, and in a next post I&amp;rsquo;ll show how to enforce these (and other) rules on build and in the continuous integration pipeline.</description></item><item><title>VS Code extensions worth trying out</title><link>https://blog.genezini.com/p/vs-code-extensions-worth-trying-out/</link><pubDate>Tue, 11 Oct 2022 07:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/vs-code-extensions-worth-trying-out/</guid><description>&lt;img src="https://blog.genezini.com/p/vs-code-extensions-worth-trying-out/cover.png" alt="Featured image of post VS Code extensions worth trying out" />Introduction Visual Studio Code is the most used IDE according to the Stack Overflow 2022&amp;rsquo;s Developer Survey and it has lots of extensions to help us be more productive. Even developers who use another main IDE probably use VS Code for some part of their jobs.
In this post I&amp;rsquo;ll show some of the extensions that I use to work, study and write this blog.
1 - Project Manager Project Manager creates an icon in the side bar and lets you save opened folders for quick access.</description></item><item><title>Working on multiple Git branches in parallel</title><link>https://blog.genezini.com/p/working-on-multiple-git-branches-in-parallel/</link><pubDate>Fri, 30 Sep 2022 09:35:00 -0300</pubDate><guid>https://blog.genezini.com/p/working-on-multiple-git-branches-in-parallel/</guid><description>&lt;img src="https://blog.genezini.com/p/working-on-multiple-git-branches-in-parallel/cover.png" alt="Featured image of post Working on multiple Git branches in parallel" />Introduction When working on a project, many times we have to switch to a different branch to help a colleague, fix a bug, or to work on another feature (because of a change in priorities or blocks).
In these situations, we have some options:
Clone again to another folder: This was the option that I used up until some time ago, but if you are working on a big code base, it may take some time to download the remote repository and it will use more space in the disk because you will end up with one copy of the repository for each branch;</description></item><item><title>Integration tests without API dependencies with ASP.NET Core and WireMock.Net</title><link>https://blog.genezini.com/p/integration-tests-without-api-dependencies-with-asp.net-core-and-wiremock.net/</link><pubDate>Sun, 25 Sep 2022 08:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/integration-tests-without-api-dependencies-with-asp.net-core-and-wiremock.net/</guid><description>&lt;img src="https://blog.genezini.com/p/integration-tests-without-api-dependencies-with-asp.net-core-and-wiremock.net/cover.jpg" alt="Featured image of post Integration tests without API dependencies with ASP.NET Core and WireMock.Net" />Introduction Although there are many definitions about the scope of an integration test, Martin Fowler defines Narrow integration tests, where the integration with other systems are tested using mocks, and Broad integration tests, where they communicate using real APIs.
In this post, I&amp;rsquo;ll explain how to create mocks for HTTP APIs in narrow integration tests using the WireMock.Net library.
What should we mock? Vladimir Khorikov has a concept of managed dependencies and unmanaged dependencies, which I consider complementary to Martin Fowler&amp;rsquo;s, to choose what should be to mocked.</description></item></channel></rss>