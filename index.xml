<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Daniel Genezini</title><link>https://blog.genezini.com/</link><description>Recent content on Daniel Genezini</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2022 Daniel Genezini All rights reserved</copyright><lastBuildDate>Fri, 30 Sep 2022 09:35:00 -0300</lastBuildDate><atom:link href="https://blog.genezini.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Working on multiple GIT branches in parallel</title><link>https://blog.genezini.com/p/working-on-multiple-git-branches-in-parallel/</link><pubDate>Fri, 30 Sep 2022 09:35:00 -0300</pubDate><guid>https://blog.genezini.com/p/working-on-multiple-git-branches-in-parallel/</guid><description>&lt;img src="https://blog.genezini.com/p/working-on-multiple-git-branches-in-parallel/cover.png" alt="Featured image of post Working on multiple GIT branches in parallel" />Introduction When working on a project, many times we have to switch to a different branch to help a colleague, fix a bug, or to work on another feature (because of a change in priorities or blocks).
In these situations, we have some options:
Clone again to another folder: This was the option that I used up until some time ago, but if you are working on a big code base, it may take some time to download the remote repository and it will use more space in the disk because you will end up with one copy of the repository for each branch;</description></item><item><title>Integration tests without API dependencies with ASP.NET Core and WireMock.Net</title><link>https://blog.genezini.com/p/integration-tests-without-api-dependencies-with-asp.net-core-and-wiremock.net/</link><pubDate>Sun, 25 Sep 2022 08:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/integration-tests-without-api-dependencies-with-asp.net-core-and-wiremock.net/</guid><description>&lt;img src="https://blog.genezini.com/p/integration-tests-without-api-dependencies-with-asp.net-core-and-wiremock.net/cover.jpg" alt="Featured image of post Integration tests without API dependencies with ASP.NET Core and WireMock.Net" />Introduction Although there are many definitions about the scope of an integration test, Martin Fowler defines Narrow integration tests, where the integration with other systems are tested using mocks, and Broad integration tests, where they communicate using real APIs.
In this post, I&amp;rsquo;ll explain how to create mocks for HTTP APIs in narrow integration tests using the WireMock.Net library.
What should we mock? Vladimir Khorikov has a concept of managed dependencies and unmanaged dependencies, which I consider complementary to Martin Fowler&amp;rsquo;s, to choose what should be to mocked.</description></item><item><title>Archives</title><link>https://blog.genezini.com/archives/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://blog.genezini.com/archives/</guid><description/></item><item><title>Links</title><link>https://blog.genezini.com/links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.genezini.com/links/</guid><description>To use this feature, add links section to frontmatter.
This page&amp;rsquo;s frontmatter:
1 2 3 4 5 6 7 8 9 links: - title: GitHub description: GitHub is the world&amp;#39;s largest software development platform. website: https://github.com image: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png - title: TypeScript description: TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. website: https://www.typescriptlang.org image: ts-logo-128.jpg image field accepts both local and external images.</description></item><item><title>Search</title><link>https://blog.genezini.com/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.genezini.com/search/</guid><description/></item></channel></rss>