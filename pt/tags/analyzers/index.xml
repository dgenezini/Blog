<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Analyzers on Daniel Genezini | It works on my machine</title><link>https://blog.genezini.com/pt/tags/analyzers/</link><description>Recent content in Analyzers on Daniel Genezini | It works on my machine</description><generator>Hugo -- gohugo.io</generator><language>pt-br</language><copyright>2022 Daniel Genezini All rights reserved</copyright><lastBuildDate>Tue, 25 Oct 2022 08:30:00 -0300</lastBuildDate><atom:link href="https://blog.genezini.com/pt/tags/analyzers/index.xml" rel="self" type="application/rss+xml"/><item><title>Validando regras de estilo de código no .NET em tempo de compilação</title><link>https://blog.genezini.com/pt/p/validando-regras-de-estilo-de-codigo-no-.net-em-tempo-de-compilacao/</link><pubDate>Tue, 25 Oct 2022 08:30:00 -0300</pubDate><guid>https://blog.genezini.com/pt/p/validando-regras-de-estilo-de-codigo-no-.net-em-tempo-de-compilacao/</guid><description>&lt;img src="https://blog.genezini.com/pt/p/validando-regras-de-estilo-de-codigo-no-.net-em-tempo-de-compilacao/cover.pt.png" alt="Featured image of post Validando regras de estilo de código no .NET em tempo de compilação" /> A análise estática de código é uma ótima ferramenta para detectar alguns tipos de erros no seu código, como por exemplo, não liberar objetos que implementam IDisposable. Além disso, ela ajuda a validar se o código escrito está seguindo um padrão definido, por exemplo, utilizando PascalCase para nomes de classes e camelCase para nomes de parâmetros.
Nesse post eu vou mostrar como usar os Roslyn Analyzers com C# para validar alguns padrões de qualidade e estilo de código, exibindo erros em tempo de compilação caso alguma das regras não seja respeitada, não permitindo que as alterações cheguem às branches protegidas do repositório.</description><postDescription>
A análise estática de código é uma ótima ferramenta para detectar alguns tipos de erros no seu código, como por exemplo, não liberar objetos que implementam IDisposable. Além disso, ela ajuda a validar se o código escrito está seguindo um padrão definido, por exemplo, utilizando PascalCase para nomes de classes e camelCase para nomes de parâmetros.
Nesse post eu vou mostrar como usar os Roslyn Analyzers com C# para validar alguns padrões de qualidade e estilo de código, exibindo erros em tempo de compilação caso alguma das regras não seja respeitada, não permitindo que as alterações cheguem às branches protegidas do repositório.</postDescription></item></channel></rss>