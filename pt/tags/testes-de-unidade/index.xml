<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Testes de Unidade on Daniel Genezini</title><link>https://blog.genezini.com/pt/tags/testes-de-unidade/</link><description>Recent content in Testes de Unidade on Daniel Genezini</description><generator>Hugo -- gohugo.io</generator><language>pt-br</language><copyright>2022 Daniel Genezini All rights reserved</copyright><lastBuildDate>Thu, 03 Nov 2022 08:10:00 -0300</lastBuildDate><atom:link href="https://blog.genezini.com/pt/tags/testes-de-unidade/index.xml" rel="self" type="application/rss+xml"/><item><title>Analisando e validando cobertura de código no .NET com Coverlet</title><link>https://blog.genezini.com/pt/p/analisando-e-validando-cobertura-de-codigo-no-.net-com-coverlet/</link><pubDate>Thu, 03 Nov 2022 08:10:00 -0300</pubDate><guid>https://blog.genezini.com/pt/p/analisando-e-validando-cobertura-de-codigo-no-.net-com-coverlet/</guid><description>&lt;img src="https://blog.genezini.com/pt/p/analisando-e-validando-cobertura-de-codigo-no-.net-com-coverlet/cover.pt.png" alt="Featured image of post Analisando e validando cobertura de código no .NET com Coverlet" />Introdução Testes automatizados são um requisito para garantir a entrega de um produto de qualidade para nossos usuários. Eles ajudam a encontrar bugs e requisitos não cumpridos ainda em tempo de desenvolvimento, mas também diminuem o custo de manutenção fazendo alterações futuras no código mais seguras. Além disso, o ato de escrever código testável, por si só, aumenta a qualidade do código, pois código testável precisa ser desacoplado.
Nesse último post da série, vou mostrar como analisar e validar uma cobertura mínima de código nas nossas aplicações, além de como utilizar testes de integração para aumentar a cobertura do código.</description></item></channel></rss>