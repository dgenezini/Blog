<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Daniel Genezini</title><link>https://blog.genezini.com/pt/post/</link><description>Recent content in Posts on Daniel Genezini</description><generator>Hugo -- gohugo.io</generator><language>pt-br</language><copyright>2022 Daniel Genezini All rights reserved</copyright><lastBuildDate>Tue, 18 Oct 2022 08:00:00 -0300</lastBuildDate><atom:link href="https://blog.genezini.com/pt/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Definindo regras de formatação no .NET com EditorConfig</title><link>https://blog.genezini.com/pt/p/definindo-regras-de-formata%C3%A7%C3%A3o-no-.net-com-editorconfig/</link><pubDate>Tue, 18 Oct 2022 08:00:00 -0300</pubDate><guid>https://blog.genezini.com/pt/p/definindo-regras-de-formata%C3%A7%C3%A3o-no-.net-com-editorconfig/</guid><description>&lt;img src="https://blog.genezini.com/pt/p/definindo-regras-de-formata%C3%A7%C3%A3o-no-.net-com-editorconfig/cover.pt.png" alt="Featured image of post Definindo regras de formatação no .NET com EditorConfig" />Introduction Quando trabalhamos com outras pessoas, usando editores e IDEs variadas, é comum que haja diferenças nas configurações dos mesmo, fazendo com que se perca consistência no estilo de formatação do código. Por exemplo:
Usando tabs/espaços e tamanhos de indentação diferentes, dificultando a leitura do código; Usando encodings diferentes entre os arquivos, causando erros difíceis de serem encontrados (mostrando caracteres inválidos) e quebrando testes automatizados. Nesse post eu vou mostrar como manter um padrão para todos que trabalham no código, independente do editor utilizado, e em um próximo post eu mostrarei como validar essas (e outras) regras em tempo de compilação e na esteira de integração contínua.</description></item><item><title>Extensões do VS Code que vale a pena testar</title><link>https://blog.genezini.com/pt/p/extensoes-do-vs-code-que-vale-a-pena-testar/</link><pubDate>Tue, 11 Oct 2022 07:00:00 -0300</pubDate><guid>https://blog.genezini.com/pt/p/extensoes-do-vs-code-que-vale-a-pena-testar/</guid><description>&lt;img src="https://blog.genezini.com/pt/p/extensoes-do-vs-code-que-vale-a-pena-testar/cover.pt.png" alt="Featured image of post Extensões do VS Code que vale a pena testar" />Introdução Visual Studio Code é a IDE mais utilizada de acordo com a Stack Overflow 2022&amp;rsquo;s Developer Survey e tem diversas extensões para nos ajudar com nossa produtividade. Até desenvolvedores que não usam o VS Code como sua IDE principal provavelmente usam ele para alguma parte de seu trabalho.
In this post I&amp;rsquo;ll show some of the extensions that I use to work, study and write this blog.
1 - Project Manager Project Manager cria um ícone na barra lateral do VS Code e permite que você salve a pasta aberta para acesso rápido.</description></item><item><title>Trabalhando em múltiplas branches GIT paralelamente</title><link>https://blog.genezini.com/pt/p/trabalhando-em-m%C3%BAltiplas-branches-git-paralelamente/</link><pubDate>Fri, 30 Sep 2022 09:35:00 -0300</pubDate><guid>https://blog.genezini.com/pt/p/trabalhando-em-m%C3%BAltiplas-branches-git-paralelamente/</guid><description>&lt;img src="https://blog.genezini.com/pt/p/trabalhando-em-m%C3%BAltiplas-branches-git-paralelamente/cover.pt.png" alt="Featured image of post Trabalhando em múltiplas branches GIT paralelamente" />Introdução Quando estamos trabalhando em um projeto, muitas vezes precisamos trocar para uma outra branch para ajudar um colega, corrigir algum bug, ou trabalhar em uma outra funcionalidade (por troca de prioridade ou devido a algum impedimento).
Quando isso acontece, temos algumas opções:
Clonar novamente o projeto em outra pasta: Essa era a opção que eu usava até pouco tempo atrás, mas se você estiver trabalhando com um projeto grande, pode levar um tempo para fazer download do repositório remoto, além de usar mais espaço em disco, pois vai resultar em outra cópia do repositório local para cada branch.</description></item><item><title>Testes de integração sem dependências de APIs com ASP.NET Core e WireMock.Net</title><link>https://blog.genezini.com/pt/p/testes-de-integracao-com-aspnet-core-e-wiremocknet/</link><pubDate>Wed, 21 Sep 2022 08:00:00 -0300</pubDate><guid>https://blog.genezini.com/pt/p/testes-de-integracao-com-aspnet-core-e-wiremocknet/</guid><description>&lt;img src="https://blog.genezini.com/pt/p/testes-de-integracao-com-aspnet-core-e-wiremocknet/cover.pt.jpg" alt="Featured image of post Testes de integração sem dependências de APIs com ASP.NET Core e WireMock.Net" />Introdução Embora não exista um consenso sobre o escopo de um teste de integração, Martin Fowler define testes de integração restritos (Narrow), nos quais a integração entre os sistemas é testada usando substitutos (Mocks), e testes de integração amplos (Broad), que se comunicam com APIs reais.
Nesse post, explicarei como criar mocks para APIs HTTP em testes de integração restritos usando a biblioteca WireMock.Net.
O que &amp;ldquo;mockar&amp;rdquo;? Vladimir Khorikov tem um conceito de dependências gerenciadas e não gerenciadas, que considero complementar ao conceito de Martin Fowler, para escolhermos o que deve e o que não deve ser &amp;ldquo;mockado&amp;rdquo;.</description></item></channel></rss>