<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Daniel Genezini | It works on my machine</title><link>https://blog.genezini.com/post/</link><description>Recent content in Posts on Daniel Genezini | It works on my machine</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2022 Daniel Genezini All rights reserved</copyright><lastBuildDate>Tue, 11 Apr 2023 08:00:00 -0300</lastBuildDate><atom:link href="https://blog.genezini.com/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Why my WireMock mocks aren't working?</title><link>https://blog.genezini.com/p/why-my-wiremock-mocks-arent-working/</link><pubDate>Tue, 11 Apr 2023 08:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/why-my-wiremock-mocks-arent-working/</guid><description>&lt;img src="https://blog.genezini.com/p/why-my-wiremock-mocks-arent-working/cover.jpg" alt="Featured image of post Why my WireMock mocks aren't working?" /> WireMock.Net is a great tool to remove external dependencies when writing integration tests, but because it is highly configurable, it can be hard to find why its mocks aren&amp;rsquo;t working.
In this post I&amp;rsquo;ll explain how to troubleshoot problems in its configuration and show some common problems that happen in my day to day work.</description><postDescription>
WireMock.Net is a great tool to remove external dependencies when writing integration tests, but because it is highly configurable, it can be hard to find why its mocks aren&amp;rsquo;t working.
In this post I&amp;rsquo;ll explain how to troubleshoot problems in its configuration and show some common problems that happen in my day to day work.</postDescription></item><item><title>.NET and AWS S3 with LocalStack: How to develop with local S3 buckets</title><link>https://blog.genezini.com/p/dotnet-and-aws-s3-with-localstack-how-to-develop-with-local-s3-buckets/</link><pubDate>Mon, 13 Feb 2023 07:30:00 -0300</pubDate><guid>https://blog.genezini.com/p/dotnet-and-aws-s3-with-localstack-how-to-develop-with-local-s3-buckets/</guid><description>&lt;img src="https://blog.genezini.com/p/dotnet-and-aws-s3-with-localstack-how-to-develop-with-local-s3-buckets/cover.jpg" alt="Featured image of post .NET and AWS S3 with LocalStack: How to develop with local S3 buckets" /> LocalStack is an open-source framework that allows us to emulate the major AWS services locally, making it easier to develop and test cloud applications without incurring the cost and complexity of deploying to a real cloud environment.
In this post, I&amp;rsquo;ll show how to configure it to emulate S3 buckets and how to interact with those buckets from a C# application.</description><postDescription>
LocalStack is an open-source framework that allows us to emulate the major AWS services locally, making it easier to develop and test cloud applications without incurring the cost and complexity of deploying to a real cloud environment.
In this post, I&amp;rsquo;ll show how to configure it to emulate S3 buckets and how to interact with those buckets from a C# application.</postDescription></item><item><title>How to use C# 11 features in .NET 6 or older versions (even .NET Framework 2.0)</title><link>https://blog.genezini.com/p/how-to-use-c-sharp-11-features-in-dotnet-6-or-older-versions/</link><pubDate>Mon, 06 Feb 2023 07:30:00 -0300</pubDate><guid>https://blog.genezini.com/p/how-to-use-c-sharp-11-features-in-dotnet-6-or-older-versions/</guid><description>&lt;img src="https://blog.genezini.com/p/how-to-use-c-sharp-11-features-in-dotnet-6-or-older-versions/cover.jpg" alt="Featured image of post How to use C# 11 features in .NET 6 or older versions (even .NET Framework 2.0)" /> At each release, C# adds features that help us make our codes cleaner, more readable and more maintainable. The problem is that, because some features are dependent of runtime implementations, C# versions are generally tied to .NET runtime versions. For example, C# 11 is enabled only in .NET 7 and above.
In this post, I&amp;rsquo;ll show how to use C# 11 in older runtime version (even .NET Framework 2.0).</description><postDescription>
At each release, C# adds features that help us make our codes cleaner, more readable and more maintainable. The problem is that, because some features are dependent of runtime implementations, C# versions are generally tied to .NET runtime versions. For example, C# 11 is enabled only in .NET 7 and above.
In this post, I&amp;rsquo;ll show how to use C# 11 in older runtime version (even .NET Framework 2.0).</postDescription></item><item><title>Compile-time null safety: How to avoid NullReferenceException in C#</title><link>https://blog.genezini.com/p/compile-time-null-safety-how-to-avoid-nullreferenceexception-in-c/</link><pubDate>Mon, 30 Jan 2023 07:45:00 -0300</pubDate><guid>https://blog.genezini.com/p/compile-time-null-safety-how-to-avoid-nullreferenceexception-in-c/</guid><description>&lt;img src="https://blog.genezini.com/p/compile-time-null-safety-how-to-avoid-nullreferenceexception-in-c/cover.jpg" alt="Featured image of post Compile-time null safety: How to avoid NullReferenceException in C#" /> Softwares can fail at two different moments: compile time and runtime. In the context of errors, null is a problem because the effects of not handling them right are perceived only at runtime.
In this post, I&amp;rsquo;ll show how to use a C# language feature to move the null errors to compile time and help us avoid them at runtime.</description><postDescription>
Softwares can fail at two different moments: compile time and runtime. In the context of errors, null is a problem because the effects of not handling them right are perceived only at runtime.
In this post, I&amp;rsquo;ll show how to use a C# language feature to move the null errors to compile time and help us avoid them at runtime.</postDescription></item><item><title>Improve your coding experience: More 10 VS Code extensions to try</title><link>https://blog.genezini.com/p/improve-your-coding-experience-more-10-vs-code-extensions-to-try/</link><pubDate>Tue, 17 Jan 2023 06:10:00 -0300</pubDate><guid>https://blog.genezini.com/p/improve-your-coding-experience-more-10-vs-code-extensions-to-try/</guid><description>&lt;img src="https://blog.genezini.com/p/improve-your-coding-experience-more-10-vs-code-extensions-to-try/cover.jpg" alt="Featured image of post Improve your coding experience: More 10 VS Code extensions to try" /> One of the reasons VS Code is so popular is because of its extensibility. It allows us to install extentions that can do basicaly anything and improve our productivity and workflow.
In this post, I&amp;rsquo;ll increase the list of extensions from my previous post and show more 10 extensions that are worth trying.</description><postDescription>
One of the reasons VS Code is so popular is because of its extensibility. It allows us to install extentions that can do basicaly anything and improve our productivity and workflow.
In this post, I&amp;rsquo;ll increase the list of extensions from my previous post and show more 10 extensions that are worth trying.</postDescription></item><item><title>How to run disposable databases for your tests. Improve your integration tests accuracy with Testcontainers</title><link>https://blog.genezini.com/p/how-to-run-disposable-databases-for-your-tests.-improve-your-integration-tests-accuracy-with-testcontainers/</link><pubDate>Mon, 09 Jan 2023 07:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/how-to-run-disposable-databases-for-your-tests.-improve-your-integration-tests-accuracy-with-testcontainers/</guid><description>&lt;img src="https://blog.genezini.com/p/how-to-run-disposable-databases-for-your-tests.-improve-your-integration-tests-accuracy-with-testcontainers/cover.jpg" alt="Featured image of post How to run disposable databases for your tests. Improve your integration tests accuracy with Testcontainers" /> Integration tests are essential to ensure that the different components of our system work together as expected and continue to work after changes.
In this post, I&amp;rsquo;ll explain how to spin up disposable database containers to use in integration tests.</description><postDescription>
Integration tests are essential to ensure that the different components of our system work together as expected and continue to work after changes.
In this post, I&amp;rsquo;ll explain how to spin up disposable database containers to use in integration tests.</postDescription></item><item><title>Git Aliases: a time-saving secret weapon for improved workflow and productivity</title><link>https://blog.genezini.com/p/git-aliases-a-time-saving-secret-weapon-for-improved-workflow-and-productivity/</link><pubDate>Wed, 04 Jan 2023 06:30:00 -0300</pubDate><guid>https://blog.genezini.com/p/git-aliases-a-time-saving-secret-weapon-for-improved-workflow-and-productivity/</guid><description>&lt;img src="https://blog.genezini.com/p/git-aliases-a-time-saving-secret-weapon-for-improved-workflow-and-productivity/cover.jpg" alt="Featured image of post Git Aliases: a time-saving secret weapon for improved workflow and productivity" /> Git is a powerful tool with lots of commands and customizable options. Fortunately, to make our lives easier, we can create aliases to simplify these commands.
In this post I&amp;rsquo;ll explain how Git aliases work and show the aliases I currently use.</description><postDescription>
Git is a powerful tool with lots of commands and customizable options. Fortunately, to make our lives easier, we can create aliases to simplify these commands.
In this post I&amp;rsquo;ll explain how Git aliases work and show the aliases I currently use.</postDescription></item><item><title>Don't box your logs</title><link>https://blog.genezini.com/p/dont-box-your-logs/</link><pubDate>Mon, 02 Jan 2023 07:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/dont-box-your-logs/</guid><description>&lt;img src="https://blog.genezini.com/p/dont-box-your-logs/cover.jpg" alt="Featured image of post Don't box your logs" /> .NET&amp;rsquo;s default interface for logging (ILogger) can log any number and type of parameters in the log messages. Because of this, the parameters are passed as object to the log implementation, causing the boxing of value types.
In this post, I&amp;rsquo;ll show how .NET Core removed the need for boxing when logging, focusing on the .NET 6 source generators.</description><postDescription>
.NET&amp;rsquo;s default interface for logging (ILogger) can log any number and type of parameters in the log messages. Because of this, the parameters are passed as object to the log implementation, causing the boxing of value types.
In this post, I&amp;rsquo;ll show how .NET Core removed the need for boxing when logging, focusing on the .NET 6 source generators.</postDescription></item><item><title>7 tips for improving your productivity with Git</title><link>https://blog.genezini.com/p/7-tips-for-improving-your-productivity-with-git/</link><pubDate>Tue, 27 Dec 2022 06:15:00 -0300</pubDate><guid>https://blog.genezini.com/p/7-tips-for-improving-your-productivity-with-git/</guid><description>&lt;img src="https://blog.genezini.com/p/7-tips-for-improving-your-productivity-with-git/cover.jpg" alt="Featured image of post 7 tips for improving your productivity with Git" /> Git is the most popular source control system with an incredible 93.87% of adoption by developers (according to StackOverflow&amp;rsquo;s 2022 Survey). It&amp;rsquo;s a really powerful system with lots of hidden features not known by most of us developers.
In this post, I&amp;rsquo;ll show some of these features that will make your work easier when using Git.</description><postDescription>
Git is the most popular source control system with an incredible 93.87% of adoption by developers (according to StackOverflow&amp;rsquo;s 2022 Survey). It&amp;rsquo;s a really powerful system with lots of hidden features not known by most of us developers.
In this post, I&amp;rsquo;ll show some of these features that will make your work easier when using Git.</postDescription></item><item><title>Time-out requests in ASP.NET Core with cancellation tokens</title><link>https://blog.genezini.com/p/time-out-requests-in-asp.net-core-with-cancellation-tokens/</link><pubDate>Tue, 20 Dec 2022 06:45:00 -0300</pubDate><guid>https://blog.genezini.com/p/time-out-requests-in-asp.net-core-with-cancellation-tokens/</guid><description>&lt;img src="https://blog.genezini.com/p/time-out-requests-in-asp.net-core-with-cancellation-tokens/cover.jpg" alt="Featured image of post Time-out requests in ASP.NET Core with cancellation tokens" /> When ASP.NET Core is running in an AWS Lambda and receiving requests through an AWS API Gateway, the application is not notified of an API Gateway time-out and keeps processing the request, completing it eventually. This will leave metrics and logs of a successful request when the client received a time-out error.
In this post, I&amp;rsquo;ll show how to solve this problem with cancellation tokens and time-outs.</description><postDescription>
When ASP.NET Core is running in an AWS Lambda and receiving requests through an AWS API Gateway, the application is not notified of an API Gateway time-out and keeps processing the request, completing it eventually. This will leave metrics and logs of a successful request when the client received a time-out error.
In this post, I&amp;rsquo;ll show how to solve this problem with cancellation tokens and time-outs.</postDescription></item><item><title>Interesting Links - 03 (16-Dec-2022)</title><link>https://blog.genezini.com/p/interesting-links-03/</link><pubDate>Fri, 16 Dec 2022 07:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/interesting-links-03/</guid><description>&lt;img src="https://blog.genezini.com/p/interesting-links-03/cover-links.jpg" alt="Featured image of post Interesting Links - 03 (16-Dec-2022)" />Interesting links of the week of 16-Dec-2022</description><postDescription>
Interesting links of the week of 16-Dec-2022</postDescription></item><item><title>Canceling abandoned requests in ASP.NET Core</title><link>https://blog.genezini.com/p/canceling-abandoned-requests-in-asp.net-core/</link><pubDate>Mon, 12 Dec 2022 07:30:00 -0300</pubDate><guid>https://blog.genezini.com/p/canceling-abandoned-requests-in-asp.net-core/</guid><description>&lt;img src="https://blog.genezini.com/p/canceling-abandoned-requests-in-asp.net-core/cover.jpg" alt="Featured image of post Canceling abandoned requests in ASP.NET Core" /> When a client makes an HTTP request, the client can abort the request, leaving the server processing if it&amp;rsquo;s not prepared to handle this scenario; wasting its resources that could be used to process other jobs.
In this post, I&amp;rsquo;ll show how to use Cancellation Tokens to cancel running requests that were aborted by clients.</description><postDescription>
When a client makes an HTTP request, the client can abort the request, leaving the server processing if it&amp;rsquo;s not prepared to handle this scenario; wasting its resources that could be used to process other jobs.
In this post, I&amp;rsquo;ll show how to use Cancellation Tokens to cancel running requests that were aborted by clients.</postDescription></item><item><title>Interesting Links - 02 (09-Dec-2022)</title><link>https://blog.genezini.com/p/interesting-links-02/</link><pubDate>Fri, 09 Dec 2022 14:40:00 -0300</pubDate><guid>https://blog.genezini.com/p/interesting-links-02/</guid><description>&lt;img src="https://blog.genezini.com/p/interesting-links-02/cover-links.jpg" alt="Featured image of post Interesting Links - 02 (09-Dec-2022)" />Interesting links of the week of 09-Dec-2022</description><postDescription>
Interesting links of the week of 09-Dec-2022</postDescription></item><item><title>Interesting Links - 01 (02-Dec-2022)</title><link>https://blog.genezini.com/p/interesting-links-01-02-dec-2022/</link><pubDate>Fri, 02 Dec 2022 05:30:00 -0300</pubDate><guid>https://blog.genezini.com/p/interesting-links-01-02-dec-2022/</guid><description>&lt;img src="https://blog.genezini.com/p/interesting-links-01-02-dec-2022/cover-links.jpg" alt="Featured image of post Interesting Links - 01 (02-Dec-2022)" />Interesting links of the week of 02-Dec-2022</description><postDescription>
Interesting links of the week of 02-Dec-2022</postDescription></item><item><title>Keep your diagrams updated with continuous delivery</title><link>https://blog.genezini.com/p/keep-your-diagrams-updated-with-continuous-delivery/</link><pubDate>Tue, 29 Nov 2022 08:20:00 -0300</pubDate><guid>https://blog.genezini.com/p/keep-your-diagrams-updated-with-continuous-delivery/</guid><description>&lt;img src="https://blog.genezini.com/p/keep-your-diagrams-updated-with-continuous-delivery/cover.jpg" alt="Featured image of post Keep your diagrams updated with continuous delivery" /> Changing software diagrams is hard. The simple act of adding a new box may require us to drag all the existing boxes and reorganize the diagram. This is one of the main reasons to why software diagrams are constantly left deprecated after the first stages of the development process.
In this post I&amp;rsquo;ll show how defining diagrams as code can help in designing and updating software diagrams, and how to automate the process of updating the documentation with those diagrams.</description><postDescription>
Changing software diagrams is hard. The simple act of adding a new box may require us to drag all the existing boxes and reorganize the diagram. This is one of the main reasons to why software diagrams are constantly left deprecated after the first stages of the development process.
In this post I&amp;rsquo;ll show how defining diagrams as code can help in designing and updating software diagrams, and how to automate the process of updating the documentation with those diagrams.</postDescription></item><item><title>Cleaner representation of software architectures with the C4 Model</title><link>https://blog.genezini.com/p/cleaner-representation-of-software-architectures-with-the-c4-model/</link><pubDate>Tue, 22 Nov 2022 05:45:00 -0300</pubDate><guid>https://blog.genezini.com/p/cleaner-representation-of-software-architectures-with-the-c4-model/</guid><description>&lt;img src="https://blog.genezini.com/p/cleaner-representation-of-software-architectures-with-the-c4-model/cover.jpg" alt="Featured image of post Cleaner representation of software architectures with the C4 Model" /> Diagrams are a great way to visually communicate something. However, the majority of software architecture diagrams don&amp;rsquo;t really express what they intend to, lacking description of its elements and with lots of implicit notations only understood by who drew the diagram. Also, they try to express more than one vision (high level, infrastructure, flow order, etc) in only one diagram, making it even harder for non technical people or people outside the project to understand.
In this post, I&amp;rsquo;ll present the C4 model and how it can produce software architecture diagrams that are inclusive to non-technical people, easier to understand and, consequently, better to document our software systems.</description><postDescription>
Diagrams are a great way to visually communicate something. However, the majority of software architecture diagrams don&amp;rsquo;t really express what they intend to, lacking description of its elements and with lots of implicit notations only understood by who drew the diagram. Also, they try to express more than one vision (high level, infrastructure, flow order, etc) in only one diagram, making it even harder for non technical people or people outside the project to understand.
In this post, I&amp;rsquo;ll present the C4 model and how it can produce software architecture diagrams that are inclusive to non-technical people, easier to understand and, consequently, better to document our software systems.</postDescription></item><item><title>Introducing module federation for Blazor components</title><link>https://blog.genezini.com/p/introducing-module-federation-for-blazor-components/</link><pubDate>Wed, 16 Nov 2022 15:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/introducing-module-federation-for-blazor-components/</guid><description>&lt;img src="https://blog.genezini.com/p/introducing-module-federation-for-blazor-components/cover.jpg" alt="Featured image of post Introducing module federation for Blazor components" /> With the release of .NET 7, Microsoft included a feature to render Blazor components in JavaScript applications (RegisterCustomElement&amp;lt;T&amp;gt;). This helps those who want to slowly migrate JavaScript applications to Blazor, but unfortunately, won&amp;rsquo;t work for exposing Blazor components as microfrontends, as it works only for JavaScript applications deployed together with the Blazor application.
In this post, I&amp;rsquo;ll present a nuget package that I&amp;rsquo;ve created as a prototype to try to solve this problem, exposing Blazor components with module federation for other applications to consume.</description><postDescription>
With the release of .NET 7, Microsoft included a feature to render Blazor components in JavaScript applications (RegisterCustomElement&amp;lt;T&amp;gt;). This helps those who want to slowly migrate JavaScript applications to Blazor, but unfortunately, won&amp;rsquo;t work for exposing Blazor components as microfrontends, as it works only for JavaScript applications deployed together with the Blazor application.
In this post, I&amp;rsquo;ll present a nuget package that I&amp;rsquo;ve created as a prototype to try to solve this problem, exposing Blazor components with module federation for other applications to consume.</postDescription></item><item><title>Analyzing and enforcing .NET code coverage with coverlet</title><link>https://blog.genezini.com/p/analyzing-and-enforcing-.net-code-coverage-with-coverlet/</link><pubDate>Thu, 03 Nov 2022 08:10:00 -0300</pubDate><guid>https://blog.genezini.com/p/analyzing-and-enforcing-.net-code-coverage-with-coverlet/</guid><description>&lt;img src="https://blog.genezini.com/p/analyzing-and-enforcing-.net-code-coverage-with-coverlet/cover.png" alt="Featured image of post Analyzing and enforcing .NET code coverage with coverlet" /> Automated software tests are a requirement for ensuring we are delivering a product with quality to our users. It helps in finding bugs and requirements not fulfilled at development time, but also decreases the cost of maintenance by making the future changes to our code safer. Besides, the act of writing testable code alone increases the quality of the code we are writing because testable code has to be decoupled.
In this last post of this series, I&amp;rsquo;ll show how to analyze and enforce a minimum code coverage in our applications, and how to use integration tests to increase our testing surface.</description><postDescription>
Automated software tests are a requirement for ensuring we are delivering a product with quality to our users. It helps in finding bugs and requirements not fulfilled at development time, but also decreases the cost of maintenance by making the future changes to our code safer. Besides, the act of writing testable code alone increases the quality of the code we are writing because testable code has to be decoupled.
In this last post of this series, I&amp;rsquo;ll show how to analyze and enforce a minimum code coverage in our applications, and how to use integration tests to increase our testing surface.</postDescription></item><item><title>Enforcing .NET code style rules at compile time</title><link>https://blog.genezini.com/p/enforcing-.net-code-style-rules-at-compile-time/</link><pubDate>Tue, 25 Oct 2022 08:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/enforcing-.net-code-style-rules-at-compile-time/</guid><description>&lt;img src="https://blog.genezini.com/p/enforcing-.net-code-style-rules-at-compile-time/cover.png" alt="Featured image of post Enforcing .NET code style rules at compile time" /> Static code analysis is a great tool for spotting some kinds of error in your code, for example, not disposing of objects that implement IDisposable. Also, it helps to enforce and validate if the code written is following a defined standard, for example, using PascalCase for class names and camelCase for parameter names.
In this post I&amp;rsquo;ll show how to use Roslyn Analyzers with C# to enforce some standards of code quality and code style on your code, throwing errors at compile time if any rules are not being respected and not allowing the code to be pushed to protected branches of the repository.</description><postDescription>
Static code analysis is a great tool for spotting some kinds of error in your code, for example, not disposing of objects that implement IDisposable. Also, it helps to enforce and validate if the code written is following a defined standard, for example, using PascalCase for class names and camelCase for parameter names.
In this post I&amp;rsquo;ll show how to use Roslyn Analyzers with C# to enforce some standards of code quality and code style on your code, throwing errors at compile time if any rules are not being respected and not allowing the code to be pushed to protected branches of the repository.</postDescription></item><item><title>Defining formatting rules in .NET with EditorConfig</title><link>https://blog.genezini.com/p/defining-formatting-rules-in-.net-with-editorconfig/</link><pubDate>Tue, 18 Oct 2022 08:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/defining-formatting-rules-in-.net-with-editorconfig/</guid><description>&lt;img src="https://blog.genezini.com/p/defining-formatting-rules-in-.net-with-editorconfig/cover.png" alt="Featured image of post Defining formatting rules in .NET with EditorConfig" /> When working with other people and multiple editors/IDEs, it is common to have different editor settings, losing consistency in formatting styles of the code. For example:
Using tabs/spaces and different sizes of indentation, making your code harder to read; Using different encoding between files, causing hard to find bugs at runtime (showing invalid characters) and breaking automated tests. In this post I&amp;rsquo;ll show how to maintain a standard for everyone who works in the code, no matter the editor used, and in a next post I&amp;rsquo;ll show how to enforce these (and other) rules on build and in the continuous integration pipeline.</description><postDescription>
When working with other people and multiple editors/IDEs, it is common to have different editor settings, losing consistency in formatting styles of the code. For example:
Using tabs/spaces and different sizes of indentation, making your code harder to read; Using different encoding between files, causing hard to find bugs at runtime (showing invalid characters) and breaking automated tests. In this post I&amp;rsquo;ll show how to maintain a standard for everyone who works in the code, no matter the editor used, and in a next post I&amp;rsquo;ll show how to enforce these (and other) rules on build and in the continuous integration pipeline.</postDescription></item><item><title>VS Code extensions worth trying out</title><link>https://blog.genezini.com/p/vs-code-extensions-worth-trying-out/</link><pubDate>Tue, 11 Oct 2022 07:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/vs-code-extensions-worth-trying-out/</guid><description>&lt;img src="https://blog.genezini.com/p/vs-code-extensions-worth-trying-out/cover.png" alt="Featured image of post VS Code extensions worth trying out" /> Visual Studio Code is the most used IDE according to the Stack Overflow 2022&amp;rsquo;s Developer Survey and it has lots of extensions to help us be more productive. Even developers who use another main IDE probably use VS Code for some part of their jobs.
In this post I&amp;rsquo;ll show some of the extensions that I use to work, study and write this blog.</description><postDescription>
Visual Studio Code is the most used IDE according to the Stack Overflow 2022&amp;rsquo;s Developer Survey and it has lots of extensions to help us be more productive. Even developers who use another main IDE probably use VS Code for some part of their jobs.
In this post I&amp;rsquo;ll show some of the extensions that I use to work, study and write this blog.</postDescription></item><item><title>Working on multiple Git branches in parallel</title><link>https://blog.genezini.com/p/working-on-multiple-git-branches-in-parallel/</link><pubDate>Fri, 30 Sep 2022 09:35:00 -0300</pubDate><guid>https://blog.genezini.com/p/working-on-multiple-git-branches-in-parallel/</guid><description>&lt;img src="https://blog.genezini.com/p/working-on-multiple-git-branches-in-parallel/cover.png" alt="Featured image of post Working on multiple Git branches in parallel" /> When working on a project, many times we have to switch to a different branch to help a colleague, fix a bug, or to work on another feature (because of a change in priorities or blocks).
In these situations, we have some options:
Clone again to another folder: This was the option that I used up until some time ago, but if you are working on a big code base, it may take some time to download the remote repository and it will use more space in the disk because you will end up with one copy of the repository for each branch;
Stash or commit changes and checkout the other branch: This is ok, but it takes more steps and doesn&amp;rsquo;t allow for multiple branches checked out in parallel;
Add a new working tree: This is what I prefer to do because I can have only one local repository shared between the branches.
In this post, I&amp;rsquo;ll show how to use Git working trees to make those branch switches easier.</description><postDescription>
When working on a project, many times we have to switch to a different branch to help a colleague, fix a bug, or to work on another feature (because of a change in priorities or blocks).
In these situations, we have some options:
Clone again to another folder: This was the option that I used up until some time ago, but if you are working on a big code base, it may take some time to download the remote repository and it will use more space in the disk because you will end up with one copy of the repository for each branch;
Stash or commit changes and checkout the other branch: This is ok, but it takes more steps and doesn&amp;rsquo;t allow for multiple branches checked out in parallel;
Add a new working tree: This is what I prefer to do because I can have only one local repository shared between the branches.
In this post, I&amp;rsquo;ll show how to use Git working trees to make those branch switches easier.</postDescription></item><item><title>Integration tests without API dependencies with ASP.NET Core and WireMock.Net</title><link>https://blog.genezini.com/p/integration-tests-without-api-dependencies-with-asp.net-core-and-wiremock.net/</link><pubDate>Sun, 25 Sep 2022 08:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/integration-tests-without-api-dependencies-with-asp.net-core-and-wiremock.net/</guid><description>&lt;img src="https://blog.genezini.com/p/integration-tests-without-api-dependencies-with-asp.net-core-and-wiremock.net/cover.jpg" alt="Featured image of post Integration tests without API dependencies with ASP.NET Core and WireMock.Net" /> Although there are many definitions about the scope of an integration test, Martin Fowler defines Narrow integration tests, where the integration with other systems are tested using mocks, and Broad integration tests, where they communicate using real APIs.
In this post, I&amp;rsquo;ll explain how to create mocks for HTTP APIs in narrow integration tests using the WireMock.Net library.</description><postDescription>
Although there are many definitions about the scope of an integration test, Martin Fowler defines Narrow integration tests, where the integration with other systems are tested using mocks, and Broad integration tests, where they communicate using real APIs.
In this post, I&amp;rsquo;ll explain how to create mocks for HTTP APIs in narrow integration tests using the WireMock.Net library.</postDescription></item></channel></rss>