<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Daniel Genezini</title><link>https://blog.genezini.com/post/</link><description>Recent content in Posts on Daniel Genezini</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2022 Daniel Genezini All rights reserved</copyright><lastBuildDate>Tue, 20 Dec 2022 06:45:00 -0300</lastBuildDate><atom:link href="https://blog.genezini.com/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Time-out requests in ASP.NET Core with cancellation tokens</title><link>https://blog.genezini.com/p/time-out-requests-in-asp.net-core-with-cancellation-tokens/</link><pubDate>Tue, 20 Dec 2022 06:45:00 -0300</pubDate><guid>https://blog.genezini.com/p/time-out-requests-in-asp.net-core-with-cancellation-tokens/</guid><description>&lt;img src="https://blog.genezini.com/p/time-out-requests-in-asp.net-core-with-cancellation-tokens/cover.jpg" alt="Featured image of post Time-out requests in ASP.NET Core with cancellation tokens" />Introduction When ASP.NET Core is running in an AWS Lambda and receiving requests through an AWS API Gateway, the application is not notified of an API Gateway time-out and keeps processing the request, completing it eventually. This will leave metrics and logs of a successful request when the client received a time-out error.
In this post, I&amp;rsquo;ll show how to solve this problem with cancellation tokens and time-outs.
The solution The idea is to time-out the request in the ASP.</description><postDescription>
Introduction When ASP.NET Core is running in an AWS Lambda and receiving requests through an AWS API Gateway, the application is not notified of an API Gateway time-out and keeps processing the request, completing it eventually. This will leave metrics and logs of a successful request when the client received a time-out error.
In this post, I&amp;rsquo;ll show how to solve this problem with cancellation tokens and time-outs.
The solution The idea is to time-out the request in the ASP.</postDescription></item><item><title>Interesting Links - 03 (16-Dec-2022)</title><link>https://blog.genezini.com/p/interesting-links-03/</link><pubDate>Fri, 16 Dec 2022 07:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/interesting-links-03/</guid><description>&lt;img src="https://blog.genezini.com/p/interesting-links-03/cover-links.jpg" alt="Featured image of post Interesting Links - 03 (16-Dec-2022)" />C# / .NET 5 new MVC features in .NET 7 MicrosoftLogger.Analyzer Automated versioning and package publishing using GitHub Actions Using Roslyn to Power C# SDK Generation from OpenAPI Specifications A Deep Dive into C#’s CancellationToken Extracting microservices from a monolithic ASP.NET Web Forms application Improve your C# with YIELD .NET 7 + Docker Git A Guide To Undoing Git Mistakes MAUI / Xamarin Shadows Everywhere in Xamarin.Forms I built an Android app on my Linux machine using .</description><postDescription>
C# / .NET 5 new MVC features in .NET 7 MicrosoftLogger.Analyzer Automated versioning and package publishing using GitHub Actions Using Roslyn to Power C# SDK Generation from OpenAPI Specifications A Deep Dive into C#’s CancellationToken Extracting microservices from a monolithic ASP.NET Web Forms application Improve your C# with YIELD .NET 7 + Docker Git A Guide To Undoing Git Mistakes MAUI / Xamarin Shadows Everywhere in Xamarin.Forms I built an Android app on my Linux machine using .</postDescription></item><item><title>Canceling abandoned requests in ASP.NET Core</title><link>https://blog.genezini.com/p/canceling-abandoned-requests-in-asp.net-core/</link><pubDate>Mon, 12 Dec 2022 07:30:00 -0300</pubDate><guid>https://blog.genezini.com/p/canceling-abandoned-requests-in-asp.net-core/</guid><description>&lt;img src="https://blog.genezini.com/p/canceling-abandoned-requests-in-asp.net-core/cover.jpg" alt="Featured image of post Canceling abandoned requests in ASP.NET Core" />Introduction When a client makes an HTTP request, the client can abort the request, leaving the server processing if it&amp;rsquo;s not prepared to handle this scenario; wasting its resources that could be used to process other jobs.
In this post, I&amp;rsquo;ll show how to use Cancellation Tokens to cancel running requests that were aborted by clients.
Cancelation Tokens I&amp;rsquo;ll not explain how Cancelation Tokens work in this post. I recommend reading this great post by Mitesh Shah that explains how they work in a simple way.</description><postDescription>
Introduction When a client makes an HTTP request, the client can abort the request, leaving the server processing if it&amp;rsquo;s not prepared to handle this scenario; wasting its resources that could be used to process other jobs.
In this post, I&amp;rsquo;ll show how to use Cancellation Tokens to cancel running requests that were aborted by clients.
Cancelation Tokens I&amp;rsquo;ll not explain how Cancelation Tokens work in this post. I recommend reading this great post by Mitesh Shah that explains how they work in a simple way.</postDescription></item><item><title>Interesting Links - 02 (09-Dec-2022)</title><link>https://blog.genezini.com/p/interesting-links-02/</link><pubDate>Fri, 09 Dec 2022 14:40:00 -0300</pubDate><guid>https://blog.genezini.com/p/interesting-links-02/</guid><description>&lt;img src="https://blog.genezini.com/p/interesting-links-02/cover-links.jpg" alt="Featured image of post Interesting Links - 02 (09-Dec-2022)" />Architecture No architecture is better than bad architecture AWS Faster iteration experience for AWS SAM applications in the AWS Toolkits for JetBrains and VS Code New — Create Point-to-Point Integrations Between Event Producers and Consumers with Amazon EventBridge Pipes Blazor How to Build a Blog App Using Blazor WASM and Strapi C# / .NET TIL: Always check for missing configuration values inside constructors Validating .NET Configuration Removing out-of-support components from your Visual Studio installations A new wave of analyzers in .</description><postDescription>
Architecture No architecture is better than bad architecture AWS Faster iteration experience for AWS SAM applications in the AWS Toolkits for JetBrains and VS Code New — Create Point-to-Point Integrations Between Event Producers and Consumers with Amazon EventBridge Pipes Blazor How to Build a Blog App Using Blazor WASM and Strapi C# / .NET TIL: Always check for missing configuration values inside constructors Validating .NET Configuration Removing out-of-support components from your Visual Studio installations A new wave of analyzers in .</postDescription></item><item><title>Interesting Links - 01 (02-Dec-2022)</title><link>https://blog.genezini.com/p/interesting-links-01-02-dec-2022/</link><pubDate>Fri, 02 Dec 2022 05:30:00 -0300</pubDate><guid>https://blog.genezini.com/p/interesting-links-01-02-dec-2022/</guid><description>&lt;img src="https://blog.genezini.com/p/interesting-links-01-02-dec-2022/cover-links.jpg" alt="Featured image of post Interesting Links - 01 (02-Dec-2022)" />AWS AWS announces native AOT tooling support for .NET applications on AWS Lambda
Accelerate Your Lambda Functions with Lambda SnapStart
Announcing Amazon RDS Blue/Green Deployments for safer, simpler, and faster updates
AWS 3rd party monitoring tool may be costing you an arm and leg
Blazor C# / Blazor Wolfenstein - Part 1 - Blazor
I Built an Anime Themed Pomodoro App With WebAssembly Blazor
C# / .NET Web Scraping With C#</description><postDescription>
AWS AWS announces native AOT tooling support for .NET applications on AWS Lambda
Accelerate Your Lambda Functions with Lambda SnapStart
Announcing Amazon RDS Blue/Green Deployments for safer, simpler, and faster updates
AWS 3rd party monitoring tool may be costing you an arm and leg
Blazor C# / Blazor Wolfenstein - Part 1 - Blazor
I Built an Anime Themed Pomodoro App With WebAssembly Blazor
C# / .NET Web Scraping With C#</postDescription></item><item><title>Keep your diagrams updated with continuous delivery</title><link>https://blog.genezini.com/p/keep-your-diagrams-updated-with-continuous-delivery/</link><pubDate>Tue, 29 Nov 2022 08:20:00 -0300</pubDate><guid>https://blog.genezini.com/p/keep-your-diagrams-updated-with-continuous-delivery/</guid><description>&lt;img src="https://blog.genezini.com/p/keep-your-diagrams-updated-with-continuous-delivery/cover.jpg" alt="Featured image of post Keep your diagrams updated with continuous delivery" />Introduction Changing software diagrams is hard. The simple act of adding a new box may require us to drag all the existing boxes and reorganize the diagram. This is one of the main reasons to why software diagrams are constantly left deprecated after the first stages of the development process.
In this post I&amp;rsquo;ll show how defining diagrams as code can help in designing and updating software diagrams, and how to automate the process of updating the documentation with those diagrams.</description><postDescription>
Introduction Changing software diagrams is hard. The simple act of adding a new box may require us to drag all the existing boxes and reorganize the diagram. This is one of the main reasons to why software diagrams are constantly left deprecated after the first stages of the development process.
In this post I&amp;rsquo;ll show how defining diagrams as code can help in designing and updating software diagrams, and how to automate the process of updating the documentation with those diagrams.</postDescription></item><item><title>Cleaner representation of software architectures with the C4 Model</title><link>https://blog.genezini.com/p/cleaner-representation-of-software-architectures-with-the-c4-model/</link><pubDate>Tue, 22 Nov 2022 05:45:00 -0300</pubDate><guid>https://blog.genezini.com/p/cleaner-representation-of-software-architectures-with-the-c4-model/</guid><description>&lt;img src="https://blog.genezini.com/p/cleaner-representation-of-software-architectures-with-the-c4-model/cover.jpg" alt="Featured image of post Cleaner representation of software architectures with the C4 Model" />Introduction Diagrams are a great way to visually communicate something. However, the majority of software architecture diagrams don&amp;rsquo;t really express what they intend to, lacking description of its elements and with lots of implicit notations only understood by who drew the diagram. Also, they try to express more than one vision (high level, infrastructure, flow order, etc) in only one diagram, making it even harder for non technical people or people outside the project to understand.</description><postDescription>
Introduction Diagrams are a great way to visually communicate something. However, the majority of software architecture diagrams don&amp;rsquo;t really express what they intend to, lacking description of its elements and with lots of implicit notations only understood by who drew the diagram. Also, they try to express more than one vision (high level, infrastructure, flow order, etc) in only one diagram, making it even harder for non technical people or people outside the project to understand.</postDescription></item><item><title>Introducing module federation for Blazor components</title><link>https://blog.genezini.com/p/introducing-module-federation-for-blazor-components/</link><pubDate>Wed, 16 Nov 2022 15:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/introducing-module-federation-for-blazor-components/</guid><description>&lt;img src="https://blog.genezini.com/p/introducing-module-federation-for-blazor-components/cover.jpg" alt="Featured image of post Introducing module federation for Blazor components" />Introduction With the release of .NET 7, Microsoft included a feature to render Blazor components in JavaScript applications (RegisterCustomElement&amp;lt;T&amp;gt;). This helps those who want to slowly migrate JavaScript applications to Blazor, but unfortunately, won&amp;rsquo;t work for exposing Blazor components as microfrontends, as it works only for JavaScript applications deployed together with the Blazor application.
In this post, I&amp;rsquo;ll present a nuget package that I&amp;rsquo;ve created as a prototype to try to solve this problem, exposing Blazor components with module federation for other applications to consume.</description><postDescription>
Introduction With the release of .NET 7, Microsoft included a feature to render Blazor components in JavaScript applications (RegisterCustomElement&amp;lt;T&amp;gt;). This helps those who want to slowly migrate JavaScript applications to Blazor, but unfortunately, won&amp;rsquo;t work for exposing Blazor components as microfrontends, as it works only for JavaScript applications deployed together with the Blazor application.
In this post, I&amp;rsquo;ll present a nuget package that I&amp;rsquo;ve created as a prototype to try to solve this problem, exposing Blazor components with module federation for other applications to consume.</postDescription></item><item><title>Analyzing and enforcing .NET code coverage with coverlet</title><link>https://blog.genezini.com/p/analyzing-and-enforcing-.net-code-coverage-with-coverlet/</link><pubDate>Thu, 03 Nov 2022 08:10:00 -0300</pubDate><guid>https://blog.genezini.com/p/analyzing-and-enforcing-.net-code-coverage-with-coverlet/</guid><description>&lt;img src="https://blog.genezini.com/p/analyzing-and-enforcing-.net-code-coverage-with-coverlet/cover.png" alt="Featured image of post Analyzing and enforcing .NET code coverage with coverlet" />Introduction Automated software tests are a requirement for ensuring we are delivering a product with quality to our users. It helps in finding bugs and requirements not fulfilled at development time, but also decreases the cost of maintenance by making the future changes to our code safer. Besides, the act of writing testable code alone increases the quality of the code we are writing because testable code has to be decoupled.</description><postDescription>
Introduction Automated software tests are a requirement for ensuring we are delivering a product with quality to our users. It helps in finding bugs and requirements not fulfilled at development time, but also decreases the cost of maintenance by making the future changes to our code safer. Besides, the act of writing testable code alone increases the quality of the code we are writing because testable code has to be decoupled.</postDescription></item><item><title>Enforcing .NET code style rules at compile time</title><link>https://blog.genezini.com/p/enforcing-.net-code-style-rules-at-compile-time/</link><pubDate>Tue, 25 Oct 2022 08:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/enforcing-.net-code-style-rules-at-compile-time/</guid><description>&lt;img src="https://blog.genezini.com/p/enforcing-.net-code-style-rules-at-compile-time/cover.png" alt="Featured image of post Enforcing .NET code style rules at compile time" />Introduction Static code analysis is a great tool for spotting some kinds of error in your code, for example, not disposing of objects that implement IDisposable. Also, it helps to enforce and validate if the code written is following a defined standard, for example, using PascalCase for class names and camelCase for parameter names.
In this post I&amp;rsquo;ll show how to use Roslyn Analyzers with C# to enforce some standards of code quality and code style on your code, throwing errors at compile time if any rules are not being respected and not allowing the code to be pushed to protected branches of the repository.</description><postDescription>
Introduction Static code analysis is a great tool for spotting some kinds of error in your code, for example, not disposing of objects that implement IDisposable. Also, it helps to enforce and validate if the code written is following a defined standard, for example, using PascalCase for class names and camelCase for parameter names.
In this post I&amp;rsquo;ll show how to use Roslyn Analyzers with C# to enforce some standards of code quality and code style on your code, throwing errors at compile time if any rules are not being respected and not allowing the code to be pushed to protected branches of the repository.</postDescription></item><item><title>Defining formatting rules in .NET with EditorConfig</title><link>https://blog.genezini.com/p/defining-formatting-rules-in-.net-with-editorconfig/</link><pubDate>Tue, 18 Oct 2022 08:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/defining-formatting-rules-in-.net-with-editorconfig/</guid><description>&lt;img src="https://blog.genezini.com/p/defining-formatting-rules-in-.net-with-editorconfig/cover.png" alt="Featured image of post Defining formatting rules in .NET with EditorConfig" />Introduction When working with other people and multiple editors/IDEs, it is common to have different editor settings, losing consistency in formatting styles of the code. For example:
Using tabs/spaces and different sizes of indentation, making your code harder to read; Using different encoding between files, causing hard to find bugs at runtime (showing invalid characters) and breaking automated tests. In this post I&amp;rsquo;ll show how to maintain a standard for everyone who works in the code, no matter the editor used, and in a next post I&amp;rsquo;ll show how to enforce these (and other) rules on build and in the continuous integration pipeline.</description><postDescription>
Introduction When working with other people and multiple editors/IDEs, it is common to have different editor settings, losing consistency in formatting styles of the code. For example:
Using tabs/spaces and different sizes of indentation, making your code harder to read; Using different encoding between files, causing hard to find bugs at runtime (showing invalid characters) and breaking automated tests. In this post I&amp;rsquo;ll show how to maintain a standard for everyone who works in the code, no matter the editor used, and in a next post I&amp;rsquo;ll show how to enforce these (and other) rules on build and in the continuous integration pipeline.</postDescription></item><item><title>VS Code extensions worth trying out</title><link>https://blog.genezini.com/p/vs-code-extensions-worth-trying-out/</link><pubDate>Tue, 11 Oct 2022 07:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/vs-code-extensions-worth-trying-out/</guid><description>&lt;img src="https://blog.genezini.com/p/vs-code-extensions-worth-trying-out/cover.png" alt="Featured image of post VS Code extensions worth trying out" />Introduction Visual Studio Code is the most used IDE according to the Stack Overflow 2022&amp;rsquo;s Developer Survey and it has lots of extensions to help us be more productive. Even developers who use another main IDE probably use VS Code for some part of their jobs.
In this post I&amp;rsquo;ll show some of the extensions that I use to work, study and write this blog.
1 - Project Manager Project Manager creates an icon in the side bar and lets you save opened folders for quick access.</description><postDescription>
Introduction Visual Studio Code is the most used IDE according to the Stack Overflow 2022&amp;rsquo;s Developer Survey and it has lots of extensions to help us be more productive. Even developers who use another main IDE probably use VS Code for some part of their jobs.
In this post I&amp;rsquo;ll show some of the extensions that I use to work, study and write this blog.
1 - Project Manager Project Manager creates an icon in the side bar and lets you save opened folders for quick access.</postDescription></item><item><title>Working on multiple Git branches in parallel</title><link>https://blog.genezini.com/p/working-on-multiple-git-branches-in-parallel/</link><pubDate>Fri, 30 Sep 2022 09:35:00 -0300</pubDate><guid>https://blog.genezini.com/p/working-on-multiple-git-branches-in-parallel/</guid><description>&lt;img src="https://blog.genezini.com/p/working-on-multiple-git-branches-in-parallel/cover.png" alt="Featured image of post Working on multiple Git branches in parallel" />Introduction When working on a project, many times we have to switch to a different branch to help a colleague, fix a bug, or to work on another feature (because of a change in priorities or blocks).
In these situations, we have some options:
Clone again to another folder: This was the option that I used up until some time ago, but if you are working on a big code base, it may take some time to download the remote repository and it will use more space in the disk because you will end up with one copy of the repository for each branch;</description><postDescription>
Introduction When working on a project, many times we have to switch to a different branch to help a colleague, fix a bug, or to work on another feature (because of a change in priorities or blocks).
In these situations, we have some options:
Clone again to another folder: This was the option that I used up until some time ago, but if you are working on a big code base, it may take some time to download the remote repository and it will use more space in the disk because you will end up with one copy of the repository for each branch;</postDescription></item><item><title>Integration tests without API dependencies with ASP.NET Core and WireMock.Net</title><link>https://blog.genezini.com/p/integration-tests-without-api-dependencies-with-asp.net-core-and-wiremock.net/</link><pubDate>Sun, 25 Sep 2022 08:00:00 -0300</pubDate><guid>https://blog.genezini.com/p/integration-tests-without-api-dependencies-with-asp.net-core-and-wiremock.net/</guid><description>&lt;img src="https://blog.genezini.com/p/integration-tests-without-api-dependencies-with-asp.net-core-and-wiremock.net/cover.jpg" alt="Featured image of post Integration tests without API dependencies with ASP.NET Core and WireMock.Net" />Introduction Although there are many definitions about the scope of an integration test, Martin Fowler defines Narrow integration tests, where the integration with other systems are tested using mocks, and Broad integration tests, where they communicate using real APIs.
In this post, I&amp;rsquo;ll explain how to create mocks for HTTP APIs in narrow integration tests using the WireMock.Net library.
What should we mock? Vladimir Khorikov has a concept of managed dependencies and unmanaged dependencies, which I consider complementary to Martin Fowler&amp;rsquo;s, to choose what should be to mocked.</description><postDescription>
Introduction Although there are many definitions about the scope of an integration test, Martin Fowler defines Narrow integration tests, where the integration with other systems are tested using mocks, and Broad integration tests, where they communicate using real APIs.
In this post, I&amp;rsquo;ll explain how to create mocks for HTTP APIs in narrow integration tests using the WireMock.Net library.
What should we mock? Vladimir Khorikov has a concept of managed dependencies and unmanaged dependencies, which I consider complementary to Martin Fowler&amp;rsquo;s, to choose what should be to mocked.</postDescription></item></channel></rss>